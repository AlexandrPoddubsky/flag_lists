<?php
// $Id$

module_load_include('inc', 'flag', 'includes/flag.admin');
module_load_include('inc', 'flag', 'flag');

/**
 * @file
 * The Flag Lists module.
 *
 * Extends flag to allow individual users to create personal flags.
 */

/**
 * Implementation of hook_menu().
 */
function flag_lists_menu() {
  $items = array();
  $items['admin/build/flags/lists'] = array(
    'title' => 'Lists',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flag_lists_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer flags'),
    'description' => 'Configure default settings allowing users to mark content with personal flags.',
    'file' => 'flag_lists.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  $items['admin/build/flags/lists/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flag_lists_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer flags'),
    'description' => 'Configure default settings allowing users to mark content with personal flags.',
    'file' => 'flag_lists.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/build/flags/lists/list'] = array(
    'title' => 'List',
    'page callback' => 'flag_lists_admin_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer flag lists'),
    'file' => 'flag_lists.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/build/flags/lists/add/%'] = array(
    'title' => 'Add a list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flag_lists_form', 5),
    'access callback' => 'user_access',
    'access arguments' => array('create flag lists'),
    'file' => 'flag_lists.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/build/flags/lists/edit/%/%'] = array(
    'title' => 'Edit a list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flag_lists_form', 5, 6),
    'access callback' => 'flag_lists_is_owner',
    'access arguments' => array(5, 4),
    'file' => 'flag_lists.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/flags/lists/delete/%'] = array(
    'title' => 'Delete a list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flag_lists_delete_confirm', 5),
    'access callback' => 'flag_lists_is_owner',
    'access arguments' => array(5, 4),
    'file' => 'flag_lists.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/flags/lists/rebuild'] = array(
    'title' => 'Rebuild all flag lists',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flag_lists_rebuild_confirm'),
    'access callback' => 'user_access',
    'access arguments' => array('administer flag lists'),
    'file' => 'flag_lists.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['user/%/flags/lists'] = array(
    'title callback' => 'flag_lists_user_title',
    'title arguments' => array(1),
    'page callback' => 'flag_lists_user_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('view flag lists'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%/flags/lists/%'] = array(
    'title' => 'Content in flag list',
    'page callback' => 'flag_lists_user_list',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('view flag lists'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * User flag page. Display a list of user-created flag lists.
 */
function flag_lists_user_page($uid) {
  return theme('flag_lists_user_page', $uid);
}

/**
 * Theme the output for a user flag administration page.
 */
function theme_flag_lists_user_page($uid) {
  $account = user_load($uid);
  drupal_set_title(t('@name lists', array('@name' => ucfirst(variable_get('flag_lists_name', t('flags'))))));
  if ($flags = flag_lists_get_user_flags(NULL, $account)) {
    // Build the list of flag lists for this node.
    foreach ($flags as $flag) {
      $ops = theme('links', array(
        'flags_edit' =>  array( 'title' => t('edit'), 'href' => 'admin/build/flags/lists/edit/'. $flag->fid .'/'. $flag->name, 'query' => drupal_get_destination()),
        'flags_delete' =>  array( 'title' => t('delete'), 'href' => 'admin/build/flags/lists/delete/'. $flag->fid, 'query' => drupal_get_destination()),
      ));
      $items[] = l($flag->title, "user/$uid/flags/lists/".$flag->fid) . $ops;
    }
  }
  #$items[] = l(t('Make a new ') . variable_get('flag_lists_name', t('Flag')), 'admin/build/flags/lists/add/'. $content_type, array('query' => drupal_get_destination()));
  drupal_add_css(drupal_get_path('module', 'flag_lists') .'/theme/flag_lists.css');
  return theme(item_list, $items);
}

/**
 * List the contents of a user-defined list
 */
function flag_lists_user_list($fid) {
  return theme('flag_lists_user_list', $fid);
}

/**
 * Theme the output of user-defined list page
 */
function theme_flag_lists_user_list($fid) {
  $flag = flag_lists_get_flag($fid);
  drupal_set_title($flag->title);
  $content = flag_lists_get_flagged_content($fid);
  foreach($content as $item){
    if($item->content_type == 'node'){
      $node = node_load($item->content_id);
      $items[] = l($node->title, 'node/'.$node->nid);
    }
  }
  
  $breadcrumb = menu_get_active_breadcrumb();
  $breadcrumb[] = l(t('@name lists', array('@name' => ucfirst(variable_get('flag_lists_name', t('Flags'))))), 'user/'. arg(1) .'/flags/lists');
  drupal_set_breadcrumb($breadcrumb);
  return theme(item_list, $items);
}

/**
 * Implementation of hook_theme().
 */
function flag_lists_theme() {
  $path = drupal_get_path('module', 'flag') .'/theme';

  return array(
    'flag_lists_list' => array(
      'arguments' => array('content_type' => NULL, 'content_id' => NULL),
    ),
    'flag_lists_admin_page' => array(
      'arguments' => array('flags' => NULL),
    ),
    'flag_lists_user_page' => array(
      'argumnts' => array('uid' => NULL),
    ),
    'flag_lists_user_list' => array(
      'argumnts' => array('flag_name' => NULL),
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function flag_lists_perm() {
  return array('create flag lists', 'edit own flag lists', 'delete own flag lists', 'view flag lists');
}

/**
 * Implementation of hook_db_rewrite_sql().
 *
 * Alter the flag_get_flags() query so that it only inludes flag lists that are
 * owned by the current user and are available on the current content type, or
 * needed for the flag or unflag callback.
 *
 * But, don't rewrite on the edit or delete form. @todo Can we do this without
 * arg checking?
 */
function flag_lists_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
  $skip = (arg(2) == 'flags' && (arg(3) == 'edit' || arg(3) == 'delete'));
  if ($primary_table == 'flags' && $primary_field == 'fid' && !$skip) {
    $fids = implode(', ', flag_lists_get_content_fids());
    $return = array();
    $return['where'] = "f.fid IN ($fids)";
    return $return;
  }
}

/**
 * Helper function to build an array of all flags available to or owned by the
 * current user and that are available on the current content type.
 */
function flag_lists_get_content_fids() {
  global $user;

  // This is a node view. We only care about nodes for now.
  if (arg(0) == 'node' && is_numeric(arg(1)) && is_null(arg(2))) {
    $type = db_result(db_query("SELECT type from {node} WHERE nid = %d", arg(1)));

    // Get current user's flags for this node.
    $fc_result = db_query("SELECT f.fid
        FROM {flag_lists} fc
        LEFT JOIN {flag_types} fn ON fn.fid = fc.fid
        LEFT JOIN {flags} f ON fc.fid = f.fid
        WHERE fc.uid = %d
        AND fn.type = '%s'", $user->uid, $type);

    while ($row = db_fetch_array($fc_result)) {
      $fids[] = $row['fid'];
    }
  }

  // This is the flag / unflag callback
  elseif (arg(0) == 'flag' && (arg(1) == 'flag' || arg(1) == 'unflag')) {
    // Get the flag for this request.
    $fids[] = db_result(db_query("SELECT f.fid
        FROM {flags} f
        WHERE f.name = '%s'", arg(2)));
  }

  // Get the regular flags for this node. The flag module will narrow by role,
  // etc. when flag_get_flags() is called. These flag ids are always returned.
  $f_result = db_query("SELECT f.fid
        FROM {flags} f
        LEFT JOIN {flag_lists} fc ON fc.fid = f.fid
        WHERE fc.fid IS NULL");

  while ($row = db_fetch_array($f_result)) {
    $fids[] = $row['fid'];
  }
  if(is_array($fids)){
    return array_unique($fids);
  } else {
    return array();
  }
}

/**
 * Implementation of hook_block().
 *
 * A block of personal flags for the current user on the current node.
 */
function flag_lists_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('User flag lists');
    return $blocks;
  }
  elseif ($op == 'view' && user_access('create flag lists') ) {
    $block['subject'] =  t('My ') . variable_get('flag_lists_name', t('Flags'));
    $block['content'] = theme('flag_lists_list', $node);
    if (!is_null($block['content'])) {
      return $block;
    }
  }
}

/**
 * Implementation of hook_user().
 */
function flag_lists_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'delete':
      // Remove personal flags by this user.
      $result = db_query("DELETE FROM {flag_lists} WHERE uid = %d", $account->uid);
      break;
  }
}

/**
 * Create or edit a personal flag.
 */
function flag_lists_form_submit($form, $form_state) {
  if ($form_state['values']['edit']) {
    // Editing the title.
    $flag = flag_lists_get_flag($form_state['values']['type']);
    $flag->title = $form_state['values']['title'];
    flag_lists_set_messages($flag);
    $flag->save();
    _flag_lists_clear_cache();
  }
  else {
    // New personal flag.
    global $user;
    $flag_lists['uid'] = $user->uid;
    $flag = flag_flag::factory_by_content_type('node');
    $title = $form_state['values']['title'];
    $flag->title           = $title;
    $flag->types           = array($form_state['values']['type']);
    $flag->link_type       = variable_get('flag_lists_link_type', 'toggle');
    flag_lists_set_messages($flag);

    // Save to get a flag id.
    $flag->save();
    // Build unique flag name.
    $flag->name = 'fl_'. $user->uid .'_'. $flag->fid;
    $flag->update();
    $flag->enable();
    global $user;
    $flag_lists['fid'] = $flag->fid;
    $flag_lists['uid'] = $user->uid;

    drupal_write_record('flag_lists', $flag_lists);
    drupal_set_message(t('@name list @title has been created.', array('@name' => ucfirst(variable_get('flag_lists_name', t('Flags'))), '@title' => $flag->get_title())));
    _flag_clear_cache();
  }
}

/**
 * Build a flag's messages.
 */
function flag_lists_set_messages(&$flag) {
  $title = $flag->title;
  $flag->flag_short      = variable_get('flag_lists_short', t('Add this to your')) .' '. $title .' '. variable_get('flag_lists_name', t('flags list'));
  $flag->flag_long       = variable_get('flag_lists_long', t('Click here to add this to your')) .' '. $title .' '. variable_get('flag_lists_name', t('flags list'));
  $flag->flag_message    = variable_get('flag_lists_message', t('This has been added to your')) .' '. $title .' '. variable_get('flag_lists_name', t('flags list'));
  $flag->unflag_short    = variable_get('unflag_lists_short', t('Remove this from your')) .' '. $title .' '. variable_get('flag_lists_name', t('flags list'));
  $flag->unflag_long     = variable_get('unflag_lists_long', t('Click here to remove this from your')) .' '. $title .' '. variable_get('flag_lists_name', t('flags list'));
  $flag->unflag_message  = variable_get('unflag_lists_message', t('This has been removed from your')) .' '. $title .' '. variable_get('flag_lists_name', t('flags list'));
}

/**
 * Implementation of hook_flag_access().
 *
 * Make sure a user can only see his/her own personal flags.
 */
function flag_lists_flag_access($flag, $content_id, $action, $account) {
  switch ($action) {
    case 'flag':
    case 'unflag':
      if (flag_lists_is_list($flag->fid)) {
        if (db_result(db_query("SELECT * from {flag_lists} f WHERE f.uid = %d", $account->uid))) {
          return array('flag_lists' => TRUE);
        }
        else {
          return array('flag_lists' => FALSE);
        }
      }
  }
}

/**
 * Implementation of hook_link().
 */
// There may be a better way to keep flag lists out of the links, but this
// works for now. @todo Find a better way to keep flags lists out of links.
function flag_lists_link_alter(&$links, $node) {
  if (!variable_get('flag_lists_use_links', 1)) {
    foreach ($links as $name => $link) {
      if (stristr($name, 'flag-fl_')) {
        unset($links[$name]);
      }
    }
  }
}

/**
 * Implementation of hook_flag_alter().
 */
function flag_lists_flag_alter(&$flag) {
}

/**
 * Implementation of hook_flag_delete().
 *
 * This is not in flag yet.
 */
function flag_lists_flag_delete(&$flag) {
  // Flag is being deleted. Clean up our table.
  db_query("DELETE FROM {flag_lists} WHERE fid = %d", $flag->fid);
}

/**
 * Implementation of hook_views_api().
 */
//function flag_lists_views_api() {
//  return array(
//    'api' => 2.0,
//    'path' => drupal_get_path('module', 'flag_lists') . '/includes',
//  );
//}

/**
 * Helper function to test if a flag is a personal flag.
 */
function flag_lists_is_list($fid) {
  if (db_result(db_query("SELECT * from {flag_lists} f WHERE f.fid = %d", $fid))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function to test if a flag is owned by the current user.
 */
function flag_lists_is_owner($fid, $action = NULL) {
  global $user;
  if (!is_numeric($fid) || is_null($fid) || !user_access($action .' own flag lists')) {
    return FALSE;
  }
  if (db_result(db_query("SELECT * from {flag_lists} f WHERE f.fid = %d AND f.uid = %d", $fid, $user->uid))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Get a single user's flag lists.
 */
function flag_lists_get_user_flags($content_type = NULL, $user = NULL) {
  if (!$user) {
    global $user;
  }

  $sql = "SELECT f.*, fn.type from {flags} f
          LEFT JOIN {flag_lists} fc ON f.fid = fc.fid
          LEFT JOIN {flag_types} fn on fn.fid = f.fid
          WHERE fc.uid = %d";
  if ($content_type) {
    $sql .= " AND fn.type = '%s'";
  }
  $result = db_query($sql, $user->uid, $content_type);
  while ($row = db_fetch_object($result)) {
    if (!isset($flags[$row->name])) {
      $flags[$row->name] = flag_flag::factory_by_row($row);
    }
    else {
      $flags[$row->name]->types[] = $row->type;
    }
  }
  return $flags;
}

// @todo Separate out the code from the theming better.
function theme_flag_lists_list($node, $create = TRUE, $ops = TRUE) {
  // Make sure we have a node.
  if (is_object($node) && user_access('create flag lists')) {
    $content_type = $node->type;
    $content_id = $node->nid;
  }
  elseif (arg(0) == 'node' && is_numeric(arg(1)) && is_null(arg(2)) && user_access('create flag lists')) {
    $content_id = arg(1);
    $content_type = db_result(db_query("SELECT type from {node} WHERE nid = %d", $content_id));
  }
  else {
    return NULL;
  }
  global $user;
  if ($flags = flag_lists_get_user_flags($content_type)) {
    // Build the list of flag lists for this node.
    foreach ($flags as $flag) {
      if ($ops) {
        $ops = theme('links', array(
          'flags_edit' =>  array( 'title' => t('edit'), 'href' => 'admin/build/flags/lists/edit/'. $flag->fid .'/'. $flag->name, 'query' => drupal_get_destination()),
          'flags_delete' =>  array( 'title' => t('delete'), 'href' => 'admin/build/flags/lists/delete/'. $flag->fid, 'query' => drupal_get_destination()),
        ));
      }
      $items[] = $flag->theme($flag->_is_flagged($content_id, $user->uid, 0) ? 'unflag' : 'flag', $content_id) . $ops;
    }
  }
  if ($create) {
    $items[] = l(t('Make a new @name list', array('@name' => variable_get('flag_lists_name', t('Flags')))), 'admin/build/flags/lists/add/'. $content_type, array('query' => drupal_get_destination()));
  }
  drupal_add_css(drupal_get_path('module', 'flag_lists') .'/theme/flag_lists.css');
  return theme(item_list, $items);
}

/**
 * Clear the flag cache.
 *
 * This is a less severe cache clear than provided by flag. All flag lists
 * users must be authorized, so we don't need to flush the page and menu caches.
 */
function _flag_lists_clear_cache() {
  // We're not using _flag_clear_cache because we probably don't need the menu
  // rebuild and don't need to clear the page cache.
  if (module_exists('views')) {
    views_invalidate_cache();
  }
  // Reset our flags cache, thereby making the following code aware of the
  // modifications.
  flag_get_flags(NULL, NULL, NULL, TRUE);
}

/**
 * Update ALL flag lists with settings form values.
 */
function flag_lists_rebuild() {
  $flags = flag_lists_get_flags();
  foreach ($flags as $flag) {
    flag_lists_set_messages($flag);
    $flag->link_type = variable_get('flag_lists_link_type', 'toggle');
    $flag->save();
  }
}

/**
 * Build array of all flag lists.
 *
 * Using this instead of flag_get_flags() for performance.
 */
function flag_lists_get_flags() {
  $result = db_query("SELECT f.*, fn.type, fl.uid
    FROM {flag_lists} fl
    LEFT JOIN {flag_types} fn ON fn.fid = fl.fid
    LEFT JOIN {flags} f ON fl.fid = f.fid");
  while ($row = db_fetch_object($result)) {
    if (!isset($flags[$row->name])) {
      $flags[$row->name] = flag_flag::factory_by_row($row);
    }
    else {
      $flags[$row->name]->types[] = $row->type;
    }
    $flags[$row->name]->uid = $row->uid;
  }
  return $flags;
}

/**
 * Get a specific flag.
 *
 * Using this instead of flag_get_flag() for performance.
 */
function flag_lists_get_flag($fid) {
  $result = db_fetch_object(db_query("SELECT f.*, fn.type, fl.uid
      FROM {flag_lists} fl
      LEFT JOIN {flag_types} fn ON fn.fid = fl.fid
      LEFT JOIN {flags} f ON fl.fid = f.fid
      WHERE f.fid = %d", $fid));
    $flag = flag_flag::factory_by_row($result);
    $flag->uid = $result->uid;
  return $flag;
}

/**
 * Get all flagged content in a flag.
 *
 * Using this instead of flag_get_flagged_content() because we need to make sure that we use flag_lists_get_flags()
 *
 * @param
 *   The flag name for which to retrieve flagged content.
 */
function flag_lists_get_flagged_content($fid) {
  $return = array();
  $flag = flag_lists_get_flag($fid);
  $result = db_query("SELECT * FROM {flag_content} WHERE fid = %d", $flag->fid);
  while ($row = db_fetch_object($result)) {
    $return[] = $row;
  }
  return $return;
}

function flag_lists_user_title($uid) {
  return(t('@name lists', array('@name' => variable_get('flag_lists_name', t('Flags')))));
}